

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."recipe_box_owner" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user" "uuid",
    "recipe_box" bigint
);


ALTER TABLE "public"."recipe_box_owner" OWNER TO "postgres";


COMMENT ON TABLE "public"."recipe_box_owner" IS 'Tracks which users have joined a given RecipeBox';



ALTER TABLE "public"."recipe_box_owner" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."RecipeBoxOwner_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."recipe_box" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."recipe_box" OWNER TO "postgres";


ALTER TABLE "public"."recipe_box" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."RecipeBox_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."recipe" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp without time zone,
    "url" character varying,
    "created_by" "uuid",
    "title" character varying NOT NULL,
    "steps" "text"[] NOT NULL,
    "ingredients" character varying[] NOT NULL,
    "photo_url" character varying,
    "recipe_box" bigint
);


ALTER TABLE "public"."recipe" OWNER TO "postgres";


ALTER TABLE "public"."recipe" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Recipe_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."recipe_box_owner"
    ADD CONSTRAINT "RecipeBoxOwner_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."recipe_box"
    ADD CONSTRAINT "RecipeBox_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."recipe"
    ADD CONSTRAINT "Recipe_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."recipe_box_owner"
    ADD CONSTRAINT "RecipeBoxOwner_recipe_box_fkey" FOREIGN KEY ("recipe_box") REFERENCES "public"."recipe_box"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."recipe_box_owner"
    ADD CONSTRAINT "RecipeBoxOwner_user_fkey" FOREIGN KEY ("user") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."recipe"
    ADD CONSTRAINT "Recipe_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE SET NULL;



ALTER TABLE ONLY "public"."recipe"
    ADD CONSTRAINT "Recipe_recipe_box_fkey" FOREIGN KEY ("recipe_box") REFERENCES "public"."recipe_box"("id") ON UPDATE CASCADE ON DELETE SET NULL;



CREATE POLICY "Add new recipes to your recipe box" ON "public"."recipe" FOR INSERT WITH CHECK (("recipe_box" IN ( SELECT "recipe_box_owner"."recipe_box"
   FROM "public"."recipe_box_owner"
  WHERE ("recipe_box_owner"."user" = ( SELECT "auth"."uid"() AS "uid")))));



CREATE POLICY "Disable delete for all users" ON "public"."recipe" FOR DELETE USING (false);



CREATE POLICY "Enable select for owner" ON "public"."recipe_box_owner" FOR SELECT USING ((( SELECT "auth"."uid"() AS "uid") = "user"));



CREATE POLICY "Select box owned by user" ON "public"."recipe_box" FOR SELECT USING (("id" IN ( SELECT "recipe_box_owner"."recipe_box"
   FROM "public"."recipe_box_owner"
  WHERE ("recipe_box_owner"."user" = ( SELECT "auth"."uid"() AS "uid")))));



CREATE POLICY "Select recipes in boxes the user owns" ON "public"."recipe" FOR SELECT USING (("recipe_box" IN ( SELECT "recipe_box_owner"."recipe_box"
   FROM "public"."recipe_box_owner"
  WHERE ("recipe_box_owner"."user" = ( SELECT "auth"."uid"() AS "uid")))));



CREATE POLICY "Update recipes in your recipe box" ON "public"."recipe" FOR UPDATE USING (("recipe_box" IN ( SELECT "recipe_box_owner"."recipe_box"
   FROM "public"."recipe_box_owner"
  WHERE ("recipe_box_owner"."user" = ( SELECT "auth"."uid"() AS "uid"))))) WITH CHECK (true);



ALTER TABLE "public"."recipe" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."recipe_box" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."recipe_box_owner" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



































































































































































































GRANT ALL ON TABLE "public"."recipe_box_owner" TO "anon";
GRANT ALL ON TABLE "public"."recipe_box_owner" TO "authenticated";
GRANT ALL ON TABLE "public"."recipe_box_owner" TO "service_role";



GRANT ALL ON SEQUENCE "public"."RecipeBoxOwner_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."RecipeBoxOwner_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."RecipeBoxOwner_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."recipe_box" TO "anon";
GRANT ALL ON TABLE "public"."recipe_box" TO "authenticated";
GRANT ALL ON TABLE "public"."recipe_box" TO "service_role";



GRANT ALL ON SEQUENCE "public"."RecipeBox_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."RecipeBox_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."RecipeBox_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."recipe" TO "anon";
GRANT ALL ON TABLE "public"."recipe" TO "authenticated";
GRANT ALL ON TABLE "public"."recipe" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Recipe_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Recipe_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Recipe_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
